CMAKE_MINIMUM_REQUIRED(VERSION 3.3)
SET(PROJECT_NAME "houzi-game-engine")
PROJECT(${PROJECT_NAME} C CXX)



# Set current version.
SET(HOU_VERSION_MAJOR 0)
SET(HOU_VERSION_MINOR 3)
SET(HOU_VERSION_PATCH 0)
MESSAGE(STATUS "--- Configuring ${PROJECT_NAME} version ${HOU_VERSION_MAJOR}.${HOU_VERSION_MINOR}.${HOU_VERSION_PATCH} ---")
MESSAGE(STATUS "")



# Set CMake module and include paths.
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)



# Check if OS is supported.
MESSAGE(STATUS "--- OS check ---")
IF(WIN32)
  MESSAGE(STATUS "Supported OS: ${CMAKE_SYSTEM}")
ELSE()
  MESSAGE(FATAL_ERROR, "Unsupported OS: ${CMAKE_SYSTEM}")
ENDIF()
MESSAGE(STATUS "")



# Print generic information about compiler, OS, and source and build directories
MESSAGE(STATUS "--- General information ---")
MESSAGE(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID}")
MESSAGE(STATUS "System: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "Binary dir: ${PROJECT_BINARY_DIR}")
MESSAGE(STATUS "Source dir: ${PROJECT_SOURCE_DIR}")
MESSAGE(STATUS "Module path: ${CMAKE_MODULE_PATH}")



# Default build type.
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose build type, options are: Debug, Release." FORCE)
ENDIF()



# Options and target name.
OPTION(HOU_CFG_BUILD_COR
  "Build the core (cor) module."
  ON
)
OPTION(HOU_CFG_BUILD_COR_TESTS
  "Build the core (cor) module tests."
  ON
)
OPTION(HOU_CFG_BUILD_MTH
  "Build the mathematics (mth) module. Depends on cor."
  ON
)
OPTION(HOU_CFG_BUILD_MTH_TESTS
  "Build the mathematics (mth) module tests."
  ON
)
OPTION(HOU_CFG_BUILD_SYS
  "Build the system (sys) module. Depends on cor and mth."
  ON
)
OPTION(HOU_CFG_BUILD_SYS_TESTS
  "Build the system (sys) module tests."
  ON
)
OPTION(HOU_CFG_BUILD_GL
  "Build the openGL wrapper (gl) module. Depends on cor and sys."
  ON
)
OPTION(HOU_CFG_BUILD_GL_TESTS
  "Build the openGL wrapper (gl) module tests."
  ON
)
OPTION(HOU_CFG_BUILD_GFX
  "Build the graphics (gfx) module. Depends on cor, mth, sys, and gl."
  ON
)
OPTION(HOU_CFG_BUILD_GFX_TESTS
  "Build the graphics (gfx) module tests."
  ON
)
OPTION(HOU_CFG_BUILD_AL
  "Build the openAL wrapper (al) module. Depends on cor."
  ON
)
OPTION(HOU_CFG_BUILD_AL_TESTS
  "Build the openAL wrapper (al) module tests."
  ON
)
OPTION(HOU_CFG_BUILD_AUD
  "Build the audio (aud) module. Depends on cor, mth and al."
  ON
)
OPTION(HOU_CFG_BUILD_AUD_TESTS
  "Build the audio (aud) module tests."
  ON
)
OPTION(HOU_CFG_BUILD_DEMOS
  "Build example executables."
  ON
)
OPTION(HOU_CFG_BUILD_OPENAL_SOFT
  "Build and link the OpenAL-Soft library. If unset, look for an installed OpenAL implementation."
  OFF
)
OPTION(HOU_CFG_STATIC_LIBS
  "If set, build static libraries. If unset, build shared libraries."
  OFF
)
OPTION(HOU_CFG_DISABLE_EXCEPTIONS
  "If set, disable exception handling and crash in case of errors. If unset, use exceptions for error handling."
  OFF
)
OPTION(HOU_CFG_ENABLE_GL_ERROR_CHECKS
  "Enable GL function call error checks for performance."
  OFF
)
OPTION(HOU_CFG_ENABLE_AL_ERROR_CHECKS
  "Enable AL function call error checks for performance."
  OFF
)



# Definitions.
IF(CMAKE_BUILD_TYPE MATCHES Debug)
  ADD_DEFINITIONS(-DHOU_DEBUG)
ELSEIF(CMAKE_BUILD_TYPE MATCHES Release)
  ADD_DEFINITIONS(-DNDEBUG)
ENDIF()
IF(HOU_CFG_STATIC_LIBS)
  ADD_DEFINITIONS(-DHOU_STATIC)
ENDIF()
IF(HOU_CFG_DISABLE_EXCEPTIONS)
  ADD_DEFINITIONS(-DHOU_DISABLE_EXCEPTIONS)
ENDIF()
IF(HOU_CFG_ENABLE_GL_ERROR_CHECKS)
  ADD_DEFINITIONS(-DHOU_ENABLE_GL_ERROR_CHECKS)
ENDIF()
IF(HOU_CFG_ENABLE_AL_ERROR_CHECKS)
  ADD_DEFINITIONS(-DHOU_ENABLE_AL_ERROR_CHECKS)
ENDIF()



# Common compiler flags
SET(HOU_COMMON_FLAGS "${CMAKE_CXX_FLAGS}")
SET(HOU_COMMON_FLAGS "${HOU_COMMON_FLAGS} -std=c++14")

IF(CMAKE_BUILD_TYPE MATCHES Release)
  SET(HOU_COMMON_FLAGS "${HOU_COMMON_FLAGS} -O2")
ENDIF()

IF(HOU_CFG_DISABLE_EXCEPTIONS)
  SET(HOU_COMMON_FLAGS "${HOU_COMMON_FLAGS} -fno-exceptions")
ELSE()
  SET(HOU_COMMON_FLAGS "${HOU_COMMON_FLAGS} -fexceptions")
ENDIF()

IF(MINGW)
  SET(HOU_COMMON_FLAGS "${HOU_COMMON_FLAGS} -mthreads")
ENDIF()

SET(HOU_COMMON_FLAGS "${HOU_COMMON_FLAGS} -Wall")
SET(HOU_COMMON_FLAGS "${HOU_COMMON_FLAGS} -Wextra")
SET(HOU_COMMON_FLAGS "${HOU_COMMON_FLAGS} -pedantic")



# Extra warning compiler flags
SET(HOU_WARNING_FLAGS "")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wzero-as-null-pointer-constant")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wswitch-enum")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wmissing-declarations")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wunreachable-code")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wfloat-equal")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wundef")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wcast-align")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wredundant-decls")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Winit-self")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wshadow")
SET(HOU_WARNING_FLAGS "${HOU_WARNING_FLAGS} -Wnon-virtual-dtor")



# Library and test compiler flags.
# Advanced warnings are disabled in the test compiler flags to silence warnings
# coming from gtest.
SET(LIB_HOU_FLAGS "${HOU_COMMON_FLAGS} ${HOU_WARNING_FLAGS}")
SET(EXE_HOU_TEST_FLAGS "${HOU_COMMON_FLAGS}")
MESSAGE(STATUS "Lib compiler flags: ${LIB_HOU_FLAGS}")
MESSAGE(STATUS "Test compiler flags: ${EXE_HOU_TEST_FLAGS}")



MESSAGE(STATUS "")



# Add subdirectories
SET(EXT_LIBS_DIR ${PROJECT_SOURCE_DIR}/external-libs)
SET(HOU_SOURCE_DIR ${PROJECT_SOURCE_DIR}/source)

IF(HOU_CFG_BUILD_COR_TESTS
  OR HOU_CFG_BUILD_MTH_TESTS
  OR HOU_CFG_BUILD_SYS_TESTS
  OR HOU_CFG_BUILD_GL_TESTS
  OR HOU_CFG_BUILD_GFX_TESTS
  OR HOU_CFG_BUILD_AL_TESTS
  OR HOU_CFG_BUILD_AUD_TESTS)
  FIND_PACKAGE(GoogleTest REQUIRED)
  SET(LIB_HOUTEST_SOURCE_DIR ${HOU_SOURCE_DIR}/houtest)
  SET(LIB_HOUTEST_INCLUDE_DIR ${LIB_HOUTEST_SOURCE_DIR}/include)
ENDIF()

IF(HOU_CFG_BUILD_COR)
  SET(LIB_HOUCOR houcor)
  SET(LIB_HOUCOR_SOURCE_DIR ${HOU_SOURCE_DIR}/houcor)
  SET(LIB_HOUCOR_INCLUDE_DIR ${LIB_HOUCOR_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_HOUCOR_SOURCE_DIR})
ENDIF()

IF(HOU_CFG_BUILD_MTH)
  SET(LIB_HOUMTH houmth)
  SET(LIB_HOUMTH_SOURCE_DIR ${HOU_SOURCE_DIR}/houmth)
  SET(LIB_HOUMTH_INCLUDE_DIR ${LIB_HOUMTH_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_HOUMTH_SOURCE_DIR})
ENDIF()

IF(HOU_CFG_BUILD_SYS)
  SET(LIB_SOIL soil)
  SET(LIB_SOIL_SOURCE_DIR ${EXT_LIBS_DIR}/soil)
  SET(LIB_SOIL_INCLUDE_DIR ${LIB_SOIL_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_SOIL_SOURCE_DIR})
  SET(LIB_HOUSYS housys)
  SET(LIB_HOUSYS_SOURCE_DIR ${HOU_SOURCE_DIR}/housys)
  SET(LIB_HOUSYS_INCLUDE_DIR ${LIB_HOUSYS_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_HOUSYS_SOURCE_DIR})
ENDIF()

IF(HOU_CFG_BUILD_GL)
  SET(LIB_GLAD glad)
  SET(LIB_GLAD_SOURCE_DIR ${EXT_LIBS_DIR}/glad)
  SET(LIB_GLAD_INCLUDE_DIR ${LIB_GLAD_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_GLAD_SOURCE_DIR})
  SET(LIB_HOUGL hougl)
  SET(LIB_HOUGL_SOURCE_DIR ${HOU_SOURCE_DIR}/hougl)
  SET(LIB_HOUGL_INCLUDE_DIR ${LIB_HOUGL_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_HOUGL_SOURCE_DIR})
ENDIF()

IF(HOU_CFG_BUILD_GFX)
  SET(LIB_FREETYPE freetype)
  SET(LIB_FREETYPE_SOURCE_DIR ${EXT_LIBS_DIR}/freetype)
  SET(LIB_FREETYPE_INCLUDE_DIR ${LIB_FREETYPE_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_FREETYPE_SOURCE_DIR})
  SET(LIB_HOUGFX hougfx)
  SET(LIB_HOUGFX_SOURCE_DIR ${HOU_SOURCE_DIR}/hougfx)
  SET(LIB_HOUGFX_INCLUDE_DIR ${LIB_HOUGFX_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_HOUGFX_SOURCE_DIR})
ENDIF()

IF(HOU_CFG_BUILD_AL)
  IF(HOU_CFG_BUILD_OPENAL_SOFT)
    SET(LIB_OPENAL OpenAL)
    SET(LIB_OPENAL_SOURCE_DIR ${EXT_LIBS_DIR}/openal-soft)
    SET(LIB_OPENAL_INCLUDE_DIR ${LIB_OPENAL_SOURCE_DIR}/include)
    ADD_SUBDIRECTORY(${LIB_OPENAL_SOURCE_DIR})
    SET_TARGET_PROPERTIES(${LIB_OPENAL} PROPERTIES
      LINKER_LANGUAGE CXX
      ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
      LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
      RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
    )
  ELSE()
    FIND_PACKAGE(OpenAL REQUIRED)
  ENDIF()
  SET(LIB_HOUAL houal)
  SET(LIB_HOUAL_SOURCE_DIR ${HOU_SOURCE_DIR}/houal)
  SET(LIB_HOUAL_INCLUDE_DIR ${LIB_HOUAL_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_HOUAL_SOURCE_DIR})
ENDIF()

IF(HOU_CFG_BUILD_AUD)
  SET(LIB_OGG ogg)
  SET(LIB_OGG_SOURCE_DIR ${EXT_LIBS_DIR}/ogg)
  SET(LIB_OGG_INCLUDE_DIR ${LIB_OGG_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_OGG_SOURCE_DIR})
  SET(LIB_VORBIS vorbis)
  SET(LIB_VORBISENC vorbisenc)
  SET(LIB_VORBISFILE vorbisfile)
  SET(LIB_VORBIS_SOURCE_DIR ${EXT_LIBS_DIR}/vorbis)
  SET(LIB_VORBIS_INCLUDE_DIR ${LIB_VORBIS_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_VORBIS_SOURCE_DIR})
  SET(LIB_HOUAUD houaud)
  SET(LIB_HOUAUD_SOURCE_DIR ${HOU_SOURCE_DIR}/houaud)
  SET(LIB_HOUAUD_INCLUDE_DIR ${LIB_HOUAUD_SOURCE_DIR}/include)
  ADD_SUBDIRECTORY(${LIB_HOUAUD_SOURCE_DIR})
ENDIF()

IF(HOU_CFG_BUILD_DEMOS)
  SET(EXE_EXAMPLES_SOURCE_DIR ${HOU_SOURCE_DIR}/demo)
  ADD_SUBDIRECTORY(${EXE_EXAMPLES_SOURCE_DIR})
ENDIF()



MESSAGE(STATUS "")

