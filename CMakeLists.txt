CMAKE_MINIMUM_REQUIRED(VERSION 3.3)
SET(PROJECT_NAME "houzi-game-engine")
PROJECT(${PROJECT_NAME} C CXX)



# Includes.
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CleanUp.cmake)



# Set current version.
SET(HOU_VERSION_MAJOR 0)
SET(HOU_VERSION_MINOR 4)
SET(HOU_VERSION_PATCH 0)
MESSAGE(STATUS "--- Configuring ${PROJECT_NAME} version ${HOU_VERSION_MAJOR}.${HOU_VERSION_MINOR}.${HOU_VERSION_PATCH} ---")
MESSAGE(STATUS "")



# Set CMake module and include paths.
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)



# Set compiler variables
IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  SET(GCC 1)
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  SET(CLANG 1)
ENDIF()
IF(CMAKE_CXX_COMPILER MATCHES "/em\\+\\+(-[a-zA-Z0-9.])?$")
  SET(EMSCRIPTEN)
ENDIF()



# Check if the current combination of OS and compiler is supported.
MESSAGE(STATUS "--- OS check ---")
IF(WIN32 OR UNIX)
  MESSAGE(STATUS "Supported OS: ${CMAKE_SYSTEM}")
ELSE()
  MESSAGE(FATAL_ERROR, "Unsupported OS: ${CMAKE_SYSTEM}")
ENDIF()

IF(WIN32)
  IF(MINGW OR MSVC)
    MESSAGE(STATUS "Supported Compiler: ${CMAKE_CXX_COMPILER_ID}")
  ELSE()
    MESSAGE(FATAL_ERROR "Unsupported Compiler: ${CMAKE_CXX_COMPILER_ID}")
  ENDIF()
ELSEIF(UNIX)
  IF(GCC OR CLANG)
    MESSAGE(STATUS "Supported Compiler: ${CMAKE_CXX_COMPILER_ID}")
  ELSE()
    MESSAGE(FATAL_ERROR "Unsupported Compiler: ${CMAKE_CXX_COMPILER_ID}")
  ENDIF()
ENDIF()

MESSAGE(STATUS "")



# Default build type.
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE
    "Release"
    CACHE STRING
    "Choose build type, options are: Debug, RelWithDebInfo, MinSizeRel, Release."
    FORCE)
ENDIF()



# Options.
OPTION(HOU_CFG_BUILD_TESTS
  "Build test executables."
  ON
)
IF(HOU_CFG_BUILD_TESTS)
  OPTION(HOU_CFG_BUILD_GOOGLE_TEST
    "Build the gtest and gmock libraries. If unset, look for installed gtest and gmock libraries."
    ON
  )
ELSE()
  UNSET_VAR(HOU_CFG_BUILD_GOOGLE_TEST)
ENDIF()
OPTION(HOU_CFG_BUILD_DEMOS
  "Build example executables."
  ON
)
OPTION(HOU_CFG_BUILD_SDL2
  "Build the SDL library. If unset, look for installed SDL libraries."
  OFF
)
OPTION(HOU_CFG_BUILD_OPENAL_SOFT
  "Build the OpenAL-Soft library. If unset, look for an installed OpenAL implementation."
  OFF
)
IF(EMSCRIPTEN)
  SET(HOU_CFG_BUILD_STATIC_LIBS ON)
ELSE()
  OPTION(HOU_CFG_BUILD_STATIC_LIBS
    "If set, build static libraries. If unset, build shared libraries."
    ON
  )
ENDIF()
OPTION(HOU_CFG_DISABLE_EXCEPTIONS
  "If set, disable exception handling and crash in case of errors. If unset, use exceptions for error handling."
  OFF
)
OPTION(HOU_CFG_ENABLE_GL_ERROR_CHECKS
  "Enable GL function call error checks for performance."
  OFF
)
OPTION(HOU_CFG_ENABLE_AL_ERROR_CHECKS
  "Enable AL function call error checks for performance."
  OFF
)



# Definitions.
IF(CMAKE_BUILD_TYPE MATCHES Debug)
  ADD_DEFINITIONS(-DHOU_DEBUG)
ENDIF()
IF(HOU_CFG_BUILD_STATIC_LIBS)
  ADD_DEFINITIONS(-DHOU_STATIC)
ENDIF()
IF(HOU_CFG_DISABLE_EXCEPTIONS)
  ADD_DEFINITIONS(-DHOU_DISABLE_EXCEPTIONS)
ENDIF()
IF(HOU_CFG_ENABLE_GL_ERROR_CHECKS)
  ADD_DEFINITIONS(-DHOU_ENABLE_GL_ERROR_CHECKS)
ENDIF()
IF(HOU_CFG_ENABLE_AL_ERROR_CHECKS)
  ADD_DEFINITIONS(-DHOU_ENABLE_AL_ERROR_CHECKS)
ENDIF()



# Output directories
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)



# Platform specific compiler and linker flags.
SET(HOU_PLATFORM_CXX_FLAGS "")
SET(HOU_PLATFORM_C_FLAGS "")
SET(HOU_PLATFORM_SHARED_LINKER_FLAGS "")
SET(HOU_PLATFORM_EXE_LINKER_FLAGS "")
IF(EMSCRIPTEN)
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} --emrun")
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s DEMANGLE_SUPPORT=1")
  # SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s USE_PTHREADS=1")
  # SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s PTHREAD_POOL_SIZE=8")
  # SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s PTHREAD_HINT_NUM_CORES=2")
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s BINARYEN_TRAP_MODE='clamp'")
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s FULL_ES2=1")
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s FULL_ES3=1")
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s USE_WEBGL2=1")
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s WASM=1")
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s USE_SDL=2")
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s ALLOW_MEMORY_GROWTH=1")
  SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} --use-preload-plugins")

  IF(NOT HOU_CFG_DISABLE_EXCEPTIONS)
    SET(HOU_PLATFORM_CXX_FLAGS "${HOU_PLATFORM_CXX_FLAGS} -s DISABLE_EXCEPTION_CATCHING=0")
  ENDIF()

  SET(HOU_PLATFORM_C_FLAGS ${HOU_PLATFORM_CXX_FLAGS})
  SET(HOU_PLATFORM_SHARED_LINKER_FLAGS ${HOU_PLATFORM_CXX_FLAGS})
  SET(HOU_PLATFORM_EXE_LINKER_FLAGS ${HOU_PLATFORM_CXX_FLAGS})
ENDIF()



# Default compiler and linker flags.
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${HOU_PLATFORM_CXX_FLAGS}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${HOU_PLATFORM_C_FLAGS}")
SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${HOU_PLATFORM_SHARED_LINKER_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${HOU_PLATFORM_EXE_FLAGS}")

IF(CMAKE_BUILD_TYPE MATCHES Release)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")
ELSEIF(CMAKE_BUILD_TYPE MATCHES MinSizeRel)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_MINSIZEREL}")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_MINSIZEREL}")
ELSEIF(CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
ELSEIF(CMAKE_BUILD_TYPE MATCHES Debug)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}")
ENDIF()



# Platform specific exe suffix.
IF(EMSCRIPTEN)
  SET(CMAKE_EXECUTABLE_SUFFIX ".html")
ENDIF()




# Print build information.
MESSAGE(STATUS "--- General information ---")
MESSAGE(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID}")
MESSAGE(STATUS "System: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "Binary dir: ${PROJECT_BINARY_DIR}")
MESSAGE(STATUS "Source dir: ${PROJECT_SOURCE_DIR}")
MESSAGE(STATUS "Module path: ${CMAKE_MODULE_PATH}")
MESSAGE(STATUS "Archive output directory: ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
MESSAGE(STATUS "Library output directory: ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
MESSAGE(STATUS "Runtime output directory: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
MESSAGE(STATUS "Executable suffix: ${CMAKE_EXECUTABLE_SUFFIX}")
MESSAGE(STATUS "Default C compiler flags: ${CMAKE_C_FLAGS}")
MESSAGE(STATUS "Default CXX compiler flags: ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "Default shared library linker flags: ${CMAKE_SHARED_LINKER_FLAGS}")
MESSAGE(STATUS "Default executable linker flags: ${CMAKE_EXE_LINKER_FLAGS}")
MESSAGE(STATUS "")



# Configure external libraries.
SET(EXT_LIBS_DIR ${PROJECT_SOURCE_DIR}/external-libs)
ADD_SUBDIRECTORY(${EXT_LIBS_DIR})



# Configure targets
SET(HOU_SOURCE_DIR ${PROJECT_SOURCE_DIR}/source)
ADD_SUBDIRECTORY(${HOU_SOURCE_DIR})

MESSAGE(STATUS "")
