CMAKE_MINIMUM_REQUIRED(VERSION 3.3)
MESSAGE(STATUS "--- Configuring demos ---")



# Find OpenAL
FIND_PACKAGE(OpenAL REQUIRED)



# Output dir
SET(EXE_DEMO_OUTPUT_DIR ${CMAKE_BINARY_DIR})
MESSAGE(STATUS "Output dir: ${EXE_DEMO_OUTPUT_DIR}")



# Definitions
GET_PROPERTY(EXE_DEMO_DEFINITIONS
  DIRECTORY ${CURRENT_SOURCE_DIR}
  PROPERTY COMPILE_DEFINITIONS
)
MESSAGE(STATUS "Definitions: ${EXE_DEMO_DEFINITIONS}")



# Include directories.
INCLUDE_DIRECTORIES(
  ${LIB_HOUAUD_SOURCE_DIR}/include
  ${LIB_HOUAL_SOURCE_DIR}/include
  ${LIB_HOUGFX_SOURCE_DIR}/include
  ${LIB_HOUGL_SOURCE_DIR}/include
  ${LIB_HOUSYS_SOURCE_DIR}/include
  ${LIB_HOUMTH_SOURCE_DIR}/include
  ${LIB_HOUCOR_SOURCE_DIR}/include

  ${LIB_OPENAL_INCLUDE_DIR}
  ${LIB_GLAD_SOURCE_DIR}/include
  ${LIB_OGG_SOURCE_DIR}/include
  ${LIB_VORBIS_SOURCE_DIR}/include

  ${EXE_DEMO_SOURCE_DIR}/include
)
GET_PROPERTY(EXE_DEMO_INCLUDE_DIRS
  DIRECTORY ${CURRENT_SOURCE_DIR}
  PROPERTY INCLUDE_DIRECTORIES
)
# MESSAGE(STATUS "Include dirs: ${EXE_DEMO_INCLUDE_DIRS}")



# Linked libraries.
SET(EXE_DEMO_LIB
  ${LIB_HOUAUD}
  ${LIB_HOUAL}
  ${LIB_OPENAL}
  ${LIB_HOUGFX}
  ${LIB_HOUGL}
  ${LIB_GLAD}
  ${LIB_HOUSYS}
  ${LIB_HOUMTH}
  ${LIB_HOUCOR}
)
IF(WIN32)
  SET(EXE_DEMO_LIB
    ${EXE_DEMO_LIB}
    gdi32
    opengl32
  )
ENDIF()
MESSAGE(STATUS "Linked libs: ${EXE_DEMO_LIB}")



# Compiler flag
SET(EXE_DEMO_FLAGS "${CMAKE_CXX_FLAGS}")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -std=c++14")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -fexceptions")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wall")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wextra")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wzero-as-null-pointer-constant")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -pedantic")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wswitch-enum")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wmissing-declarations")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wunreachable-code")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wfloat-equal")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wundef")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wcast-align")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wredundant-decls")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Winit-self")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wshadow")
SET(EXE_DEMO_FLAGS "${EXE_DEMO_FLAGS} -Wnon-virtual-dtor")
MESSAGE(STATUS "Compiler flags: ${EXE_DEMO_FLAGS}")



# Add demo executable
SET(EXE_AUDIO_DEMO audio-demo)
ADD_EXECUTABLE(${EXE_AUDIO_DEMO} src/audio_demo.cpp)
SET_TARGET_PROPERTIES(${EXE_AUDIO_DEMO} PROPERTIES
  COMPILE_FLAGS ${EXE_DEMO_FLAGS}
  RUNTIME_OUTPUT_DIRECTORY ${EXE_DEMO_OUTPUT_DIR}
)
TARGET_LINK_LIBRARIES(${EXE_AUDIO_DEMO} ${EXE_DEMO_LIB})



SET(EXE_INPUT_DEMO input-demo)
ADD_EXECUTABLE(${EXE_INPUT_DEMO} src/input_demo.cpp)
SET_TARGET_PROPERTIES(${EXE_INPUT_DEMO} PROPERTIES
  COMPILE_FLAGS ${EXE_DEMO_FLAGS}
  RUNTIME_OUTPUT_DIRECTORY ${EXE_DEMO_OUTPUT_DIR}
)
TARGET_LINK_LIBRARIES(${EXE_INPUT_DEMO} ${EXE_DEMO_LIB})



SET(EXE_RENDERING_DEMO rendering-demo)
ADD_EXECUTABLE(${EXE_RENDERING_DEMO} src/rendering_demo.cpp)
SET_TARGET_PROPERTIES(${EXE_RENDERING_DEMO} PROPERTIES
  COMPILE_FLAGS ${EXE_DEMO_FLAGS}
  RUNTIME_OUTPUT_DIRECTORY ${EXE_DEMO_OUTPUT_DIR}
)
TARGET_LINK_LIBRARIES(${EXE_RENDERING_DEMO} ${EXE_DEMO_LIB})



SET(EXE_TEXT_RENDERING_DEMO text-rendering-demo)
ADD_EXECUTABLE(${EXE_TEXT_RENDERING_DEMO} src/text_rendering_demo.cpp)
SET_TARGET_PROPERTIES(${EXE_TEXT_RENDERING_DEMO} PROPERTIES
  COMPILE_FLAGS ${EXE_DEMO_FLAGS}
  RUNTIME_OUTPUT_DIRECTORY ${EXE_DEMO_OUTPUT_DIR}
)
TARGET_LINK_LIBRARIES(${EXE_TEXT_RENDERING_DEMO} ${EXE_DEMO_LIB})



# Copy demo files.
ADD_CUSTOM_COMMAND(
  TARGET ${EXE_TEXT_RENDERING_DEMO} POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy_directory
  ${CMAKE_CURRENT_SOURCE_DIR}/data
  ${EXE_DEMO_OUTPUT_DIR}/source/demo/data
  COMMENT "Copying demo data directory to build folder"
)

MESSAGE(STATUS "")
