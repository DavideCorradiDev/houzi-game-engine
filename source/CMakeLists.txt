CMAKE_MINIMUM_REQUIRED(VERSION 3.3)
MESSAGE(STATUS "--- Configuring internal targets ---")

SET(COMPILER_FLAGS_COMMON "")
SET(COMPILER_FLAGS_LIB "")
SET(COMPILER_FLAGS_EXE "")
IF(MINGW OR GCC OR CLANG)
  # C++ standard.
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} -std=c++14")

  # Code optimizations.
  IF(CMAKE_BUILD_TYPE MATCHES Release)
    SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} -O2")
  ENDIF()

  # Exceptions in the STL.
  IF(HOU_CFG_DISABLE_EXCEPTIONS)
    SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} -fno-exceptions")
  ELSE()
    SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} -fexceptions")
  ENDIF()

  IF(MINGW)
    SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} -mthreads")
  ENDIF()

  # Position independent code.
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -fPIC")

  # Warnings
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} -Wall")
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} -Wextra")
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} -pedantic")

  # Additional warnings.
  # Activating them in the tests causes some warning coming from googletest.
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wzero-as-null-pointer-constant")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wswitch-enum")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wmissing-declarations")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wunreachable-code")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wfloat-equal")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wundef")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wcast-align")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wredundant-decls")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Winit-self")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wshadow")
  SET(COMPILER_FLAGS_LIB "${COMPILER_FLAGS_LIB} -Wnon-virtual-dtor")

ELSEIF(MSVC)
  # C++ standard.
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /std:c++14")

  # C++ runtime library.
  IF(CMAKE_BUILD_TYPE MATCHES Release)
    SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /MD")
  ELSE()
    SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /MDd")
  ENDIF()

  # Code optimizations.
  IF(CMAKE_BUILD_TYPE MATCHES Release)
    SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /O2")
  ELSE()
    SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /Od")
  ENDIF()

  # Exceptions in the STL.
  IF(HOU_CFG_DISABLE_EXCEPTIONS)
    ADD_DEFINITIONS(-D_HAS_EXCEPTIONS=0)
  ELSE()
    ADD_DEFINITIONS(-D_HAS_EXCEPTIONS=1)
  ENDIF()
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /DEHsc")

  # Define Windows symbols.
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /DWIN32")
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /DWINDOWS")

  # Warnings.
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /W3")

  # This flags are used to disable compiler warnings about using or inheriting
  # from standard library classes. This is not an issue when the Houzi Game
  # Library and the executable are compiled on the same compiler.
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /wd4251")
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /wd4275")

  # Disable additional warnings.
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /wd4996")
  SET(COMPILER_FLAGS_COMMON "${COMPILER_FLAGS_COMMON} /wd4910")
  SET(COMPILER_FLAGS_EXE "${COMPILER_FLAGS_EXE} /wd4244")
ENDIF()

SET(LIB_HOU_FLAGS "${COMPILER_FLAGS_COMMON} ${COMPILER_FLAGS_LIB}")
SET(EXE_HOU_FLAGS "${COMPILER_FLAGS_COMMON} ${COMPILER_FLAGS_EXE}")
MESSAGE(STATUS "Houzi libraries base compiler flags: ${LIB_HOU_FLAGS}")
MESSAGE(STATUS "Houzi executables base compiler flags: ${EXE_HOU_FLAGS}")

SET(HOU_LINKER_FLAGS "")
IF(EMSCRIPTEN)
  SET(HOU_LINKER_FLAGS "${HOU_LINKER_FLAGS} --emrun")
  SET(HOU_LINKER_FLAGS "${HOU_LINKER_FLAGS} -s DEMANGLE_SUPPORT=1")
  # SET(HOU_LINKER_FLAGS "${HOU_LINKER_FLAGS} -s USE_PTHREADS=1")
  # SET(HOU_LINKER_FLAGS "${HOU_LINKER_FLAGS} -s PTHREAD_POOL_SIZE=8")
  # SET(HOU_LINKER_FLAGS "${HOU_LINKER_FLAGS} -s PTHREAD_HINT_NUM_CORES=2")
  SET(HOU_LINKER_FLAGS "${HOU_LINKER_FLAGS} -s BINARYEN_TRAP_MODE='clamp'")
  IF(NOT HOU_CFG_DISABLE_EXCEPTIONS)
    SET(HOU_LINKER_FLAGS "${HOU_LINKER_FLAGS} -s DISABLE_EXCEPTION_CATCHING=0")
  ENDIF()
ENDIF()
SET(LIB_HOU_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${HOU_LINKER_FLAGS}")
SET(EXE_HOU_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${HOU_LINKER_FLAGS}")
MESSAGE(STATUS "Houzi libraries base linker flags: ${LIB_HOU_LINKER_FLAGS}")
MESSAGE(STATUS "Houzi executables base linker flags: ${EXE_HOU_LINKER_FLAGS}")

MESSAGE(STATUS "")

SET(LIB_HOUTEST_SOURCE_DIR ${HOU_SOURCE_DIR}/houtest)
SET(LIB_HOUTEST_INCLUDE_DIR ${LIB_HOUTEST_SOURCE_DIR}/include)

SET(LIB_HOUCOR houcor)
SET(LIB_HOUCOR_SOURCE_DIR ${HOU_SOURCE_DIR}/houcor)
SET(LIB_HOUCOR_INCLUDE_DIR ${LIB_HOUCOR_SOURCE_DIR}/include)
ADD_SUBDIRECTORY(${LIB_HOUCOR_SOURCE_DIR})

SET(LIB_HOUMTH houmth)
SET(LIB_HOUMTH_SOURCE_DIR ${HOU_SOURCE_DIR}/houmth)
SET(LIB_HOUMTH_INCLUDE_DIR ${LIB_HOUMTH_SOURCE_DIR}/include)
ADD_SUBDIRECTORY(${LIB_HOUMTH_SOURCE_DIR})

SET(LIB_HOUSYS housys)
SET(LIB_HOUSYS_SOURCE_DIR ${HOU_SOURCE_DIR}/housys)
SET(LIB_HOUSYS_INCLUDE_DIR ${LIB_HOUSYS_SOURCE_DIR}/include)
ADD_SUBDIRECTORY(${LIB_HOUSYS_SOURCE_DIR})

SET(LIB_HOUGL hougl)
SET(LIB_HOUGL_SOURCE_DIR ${HOU_SOURCE_DIR}/hougl)
SET(LIB_HOUGL_INCLUDE_DIR ${LIB_HOUGL_SOURCE_DIR}/include)
ADD_SUBDIRECTORY(${LIB_HOUGL_SOURCE_DIR})

SET(LIB_HOUGFX hougfx)
SET(LIB_HOUGFX_SOURCE_DIR ${HOU_SOURCE_DIR}/hougfx)
SET(LIB_HOUGFX_INCLUDE_DIR ${LIB_HOUGFX_SOURCE_DIR}/include)
ADD_SUBDIRECTORY(${LIB_HOUGFX_SOURCE_DIR})

SET(LIB_HOUAL houal)
SET(LIB_HOUAL_SOURCE_DIR ${HOU_SOURCE_DIR}/houal)
SET(LIB_HOUAL_INCLUDE_DIR ${LIB_HOUAL_SOURCE_DIR}/include)
ADD_SUBDIRECTORY(${LIB_HOUAL_SOURCE_DIR})

SET(LIB_HOUAUD houaud)
SET(LIB_HOUAUD_SOURCE_DIR ${HOU_SOURCE_DIR}/houaud)
SET(LIB_HOUAUD_INCLUDE_DIR ${LIB_HOUAUD_SOURCE_DIR}/include)
ADD_SUBDIRECTORY(${LIB_HOUAUD_SOURCE_DIR})

IF(HOU_CFG_BUILD_DEMOS)
  SET(EXE_EXAMPLES_SOURCE_DIR ${HOU_SOURCE_DIR}/demo)
  ADD_SUBDIRECTORY(${EXE_EXAMPLES_SOURCE_DIR})
ENDIF()

MESSAGE(STATUS "")
