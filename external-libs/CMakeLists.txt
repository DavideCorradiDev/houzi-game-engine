CMAKE_MINIMUM_REQUIRED(VERSION 3.3)
MESSAGE(STATUS "--- Configuring external libraries ---")
MESSAGE(STATUS "")

UNSET_VARS_STARTING_WITH("LIB_GOOGLE_TEST_")
IF(HOU_CFG_BUILD_TESTS)
  IF(HOU_CFG_BUILD_GOOGLE_TEST)
    SET(LIB_GOOGLE_TEST gtest CACHE STRING "gtest library name.")
    SET(LIB_GOOGLE_MOCK gmock CACHE STRING "gmock library name.")
    SET(LIB_GOOGLE_TEST_SOURCE_DIR ${EXT_LIBS_DIR}/googletest)
    SET(LIB_GOOGLE_TEST_INCLUDE_DIR ${LIB_GOOGLE_TEST_SOURCE_DIR}/googlemock/include
      CACHE STRING "gtest include dir.")
    ADD_SUBDIRECTORY(${LIB_GOOGLE_TEST_SOURCE_DIR})
  ELSE()
    UNSET_VARS_STARTING_WITH("gmock_")
    UNSET_VARS_STARTING_WITH("gtest_")
    FIND_PACKAGE(GoogleTest REQUIRED)
  ENDIF()
ELSE()
  UNSET_VARS_STARTING_WITH("gmock_")
  UNSET_VARS_STARTING_WITH("gtest_")
ENDIF()

UNSET_VARS_STARTING_WITH("OPENGL_")
IF(WIN32)
  SET(OPENGL_LIBRARIES opengl32 CACHE STRING "OpenGL library name.")
ELSEIF(UNIX)
  MESSAGE(STATUS "--- Looking for OpenGL  ---")
  FIND_PACKAGE(OpenGL REQUIRED)
  MESSAGE(STATUS "")
ENDIF()

UNSET_VARS_STARTING_WITH("LIB_SOIL_")
SET(LIB_SOIL soil
  CACHE STRING "SOIL library name.")
SET(LIB_SOIL_SOURCE_DIR ${EXT_LIBS_DIR}/soil)
SET(LIB_SOIL_INCLUDE_DIR ${LIB_SOIL_SOURCE_DIR}/include
  CACHE STRING "SOIL include dir")
ADD_SUBDIRECTORY(${LIB_SOIL_SOURCE_DIR})

FIND_PACKAGE(SDL2 REQUIRED)

UNSET_VARS_STARTING_WITH("LIB_GLAD_")
SET(LIB_GLAD glad
  CACHE STRING "GLAD library name.")
SET(LIB_GLAD_SOURCE_DIR ${EXT_LIBS_DIR}/glad)
SET(LIB_GLAD_INCLUDE_DIR ${LIB_GLAD_SOURCE_DIR}/include
  CACHE STRING "GLAD include dir.")
ADD_SUBDIRECTORY(${LIB_GLAD_SOURCE_DIR})

UNSET_VARS_STARTING_WITH("LIB_FREETYPE_")
SET(LIB_FREETYPE freetype
  CACHE STRING "Freetype library name.")
SET(LIB_FREETYPE_SOURCE_DIR ${EXT_LIBS_DIR}/freetype)
SET(LIB_FREETYPE_INCLUDE_DIR ${LIB_FREETYPE_SOURCE_DIR}/include
  CACHE STRING "Freetype include dir.")
ADD_SUBDIRECTORY(${LIB_FREETYPE_SOURCE_DIR})

UNSET_VARS_STARTING_WITH("LIB_OPENAL_")
IF(HOU_CFG_BUILD_OPENAL_SOFT)
  SET(LIB_OPENAL OpenAL
    CACHE STRING "OpenAL library name.")
  SET(LIB_OPENAL_SOURCE_DIR ${EXT_LIBS_DIR}/openal-soft)
  SET(LIB_OPENAL_INCLUDE_DIR ${LIB_OPENAL_SOURCE_DIR}/include
    CACHE STRING "OpenAL include dir.")
  ADD_SUBDIRECTORY(${LIB_OPENAL_SOURCE_DIR})
ELSE()
  UNSET_VARS_STARTING_WITH("ALSOFT_")
  UNSET_VAR("CMAKE_DEBUG_POSTFIX")
  UNSET_VAR("COREAUDIO_FRAMEWORK")
  UNSET_VAR("DLLTOOL_EXECUTABLE")
  UNSET_VAR("SED_EXECUTABLE")
  FIND_PACKAGE(OpenAL REQUIRED)
ENDIF()

UNSET_VARS_STARTING_WITH("LIB_OGG_")
SET(LIB_OGG ogg
  CACHE STRING "Ogg library name.")
SET(LIB_OGG_SOURCE_DIR ${EXT_LIBS_DIR}/ogg)
SET(LIB_OGG_INCLUDE_DIR ${LIB_OGG_SOURCE_DIR}/include
  CACHE STRING "Ogg include dir.")
ADD_SUBDIRECTORY(${LIB_OGG_SOURCE_DIR})

UNSET_VARS_STARTING_WITH("LIB_VORBIS_")
SET(LIB_VORBIS vorbis
  CACHE STRING "Vorbis library name.")
SET(LIB_VORBISENC vorbisenc
  CACHE STRING "Vorbis Enc library name.")
SET(LIB_VORBISFILE vorbisfile
  CACHE STRING "Vorbis file library name.")
SET(LIB_VORBIS_SOURCE_DIR ${EXT_LIBS_DIR}/vorbis)
SET(LIB_VORBIS_INCLUDE_DIR ${LIB_VORBIS_SOURCE_DIR}/include
  CACHE STRING "Vorbis include dir.")
ADD_SUBDIRECTORY(${LIB_VORBIS_SOURCE_DIR})

MESSAGE(STATUS "")
