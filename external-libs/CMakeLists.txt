CMAKE_MINIMUM_REQUIRED(VERSION 3.3)
MESSAGE(STATUS "--- Configuring external targets ---")

IF(MINGW OR GCC)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w -fPIC")
ELSEIF(MSVC)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244 /wd4018 /wd4996 /wd4267")
ENDIF()
MESSAGE(STATUS "External targets base compiler flags: ${CMAKE_CXX_FLAGS}")

MESSAGE(STATUS "")

UNSET_VARS_STARTING_WITH("LIB_GOOGLE_TEST")
UNSET_VARS_STARTING_WITH("LIB_GOOGLE_MOCK")
IF(HOU_CFG_BUILD_TESTS)
  IF(HOU_CFG_BUILD_GOOGLE_TEST)
    SET(LIB_GOOGLE_TEST gtest CACHE STRING "gtest library name.")
    SET(LIB_GOOGLE_MOCK gmock CACHE STRING "gmock library name.")
    SET(LIB_GOOGLE_TEST_SOURCE_DIR ${EXT_LIBS_DIR}/googletest)
    SET(LIB_GOOGLE_TEST_INCLUDE_DIR
      ${LIB_GOOGLE_TEST_SOURCE_DIR}/googletest/include
      CACHE STRING "gtest include dir.")
    SET(LIB_GOOGLE_MOCK_INCLUDE_DIR
      ${LIB_GOOGLE_TEST_SOURCE_DIR}/googlemock/include
      CACHE STRING "gmock include dir.")
    ADD_SUBDIRECTORY(${LIB_GOOGLE_TEST_SOURCE_DIR})
  ELSE()
    UNSET_VARS_STARTING_WITH("gmock_")
    UNSET_VARS_STARTING_WITH("gtest_")
    FIND_PACKAGE(GoogleTest REQUIRED)
    FIND_PACKAGE(GoogleMock REQUIRED)
  ENDIF()
ELSE()
  UNSET_VARS_STARTING_WITH("gmock_")
  UNSET_VARS_STARTING_WITH("gtest_")
ENDIF()

UNSET_VARS_STARTING_WITH("OPENGL")
IF(WIN32)
  SET(OPENGL_LIBRARIES opengl32 CACHE STRING "OpenGL library name.")
ELSEIF(UNIX)
  MESSAGE(STATUS "--- Looking for OpenGL  ---")
  FIND_PACKAGE(OpenGL REQUIRED)
  MESSAGE(STATUS "")
ENDIF()

UNSET_VARS_STARTING_WITH("LIB_SOIL")
SET(LIB_SOIL soil
  CACHE STRING "SOIL library name.")
SET(LIB_SOIL_SOURCE_DIR ${EXT_LIBS_DIR}/soil)
SET(LIB_SOIL_INCLUDE_DIR ${LIB_SOIL_SOURCE_DIR}/include
  CACHE STRING "SOIL include dir.")
ADD_SUBDIRECTORY(${LIB_SOIL_SOURCE_DIR})

UNSET_VARS_STARTING_WITH("LIB_SDL2")
IF(HOU_CFG_BUILD_SDL2)
  SET(LIB_SDL2 SDL2 CACHE STRING "SDL2 library name.")
  SET(LIB_SDL2_SOURCE_DIR ${EXT_LIBS_DIR}/SDL2)
  SET(LIB_SDL2_INCLUDE_DIR ${LIB_SDL2_SOURCE_DIR}/include
    CACHE STRING "SDL2 include dir.")
  ADD_SUBDIRECTORY(${LIB_SDL2_SOURCE_DIR})
ELSE()
  UNSET_VARS_STARTING_WITH(SDL)
  UNSET_VARS_STARTING_WITH(ALSA)
  UNSET_VARS_STARTING_WITH(JACK)
  UNSET_VARS_STARTING_WITH(ESD)
  UNSET_VARS_STARTING_WITH(PULSE)
  UNSET_VARS_STARTING_WITH(ARTS)
  UNSET_VARS_STARTING_WITH(NAS)
  UNSET_VARS_STARTING_WITH(FUSIONSOUND)
  UNSET_VARS_STARTING_WITH(LIBSAMPLERATE)
  UNSET_VARS_STARTING_WITH(SSE)
  UNSET_VARS_STARTING_WITH(VIDEO_)
  UNSET_VARS_STARTING_WITH(PTHREADS)
  UNSET_VARS_STARTING_WITH(X11)
  UNSET_VARS_STARTING_WITH(D_)
  UNSET_VARS_STARTING_WITH(MIR_)
  UNSET_VARS_STARTING_WITH(XCURSOR_)
  UNSET_VARS_STARTING_WITH(XEXT_)
  UNSET_VARS_STARTING_WITH(XINERAMA_)
  UNSET_VARS_STARTING_WITH(XI_)
  UNSET_VARS_STARTING_WITH(XRANDR_)
  UNSET_VARS_STARTING_WITH(XRENDER_)
  UNSET_VARS_STARTING_WITH(XSS_)
  UNSET_VARS_STARTING_WITH(XXF86VM_)
  UNSET_VARS_STARTING_WITH(X_)
  UNSET_VAR(ASSERTIONS)
  UNSET_VAR(LIBC)
  UNSET_VAR(GCC_ATOMICS)
  UNSET_VAR(ASSEMBLY)
  UNSET_VAR(SSEMATH)
  UNSET_VAR(MMX)
  UNSET_VAR(3DNOW)
  UNSET_VAR(ALTIVEC)
  UNSET_VAR(DISKAUDIO)
  UNSET_VAR(DUMMYAUDIO)
  UNSET_VAR(DIRECTFB_SHARED)
  UNSET_VAR(OSS)
  UNSET_VAR(SNDIO)
  UNSET_VAR(RPATH)
  UNSET_VAR(CLOCK_GETTIME)
  UNSET_VAR(INPUT_TSLIB)
  UNSET_VAR(WAYLAND_SHARED)
  UNSET_VAR(VIDEO_RPI)
  UNSET_VAR(SDL_X11_OPTIONS)
  UNSET_VAR(DIRECTX)
  UNSET_VAR(RENDER_D3D)
  UNSET_VAR(KMSDRM_SHARED)
  FIND_PACKAGE(SDL2 REQUIRED)
ENDIF()

UNSET_VARS_STARTING_WITH("LIB_GLAD")
SET(LIB_GLAD glad
  CACHE STRING "GLAD library name.")
SET(LIB_GLAD_SOURCE_DIR ${EXT_LIBS_DIR}/glad)
SET(LIB_GLAD_INCLUDE_DIR ${LIB_GLAD_SOURCE_DIR}/include
  CACHE STRING "GLAD include dir.")
ADD_SUBDIRECTORY(${LIB_GLAD_SOURCE_DIR})

UNSET_VARS_STARTING_WITH("LIB_FREETYPE")
SET(LIB_FREETYPE freetype
  CACHE STRING "Freetype library name.")
SET(LIB_FREETYPE_SOURCE_DIR ${EXT_LIBS_DIR}/freetype)
SET(LIB_FREETYPE_INCLUDE_DIR ${LIB_FREETYPE_SOURCE_DIR}/include
  CACHE STRING "Freetype include dir.")
ADD_SUBDIRECTORY(${LIB_FREETYPE_SOURCE_DIR})

UNSET_VARS_STARTING_WITH("LIB_OPENAL")
IF(HOU_CFG_BUILD_OPENAL_SOFT)
  SET(LIB_OPENAL OpenAL
    CACHE STRING "OpenAL library name.")
  SET(LIB_OPENAL_SOURCE_DIR ${EXT_LIBS_DIR}/openal-soft)
  SET(LIB_OPENAL_INCLUDE_DIR ${LIB_OPENAL_SOURCE_DIR}/include
    CACHE STRING "OpenAL include dir.")
  ADD_SUBDIRECTORY(${LIB_OPENAL_SOURCE_DIR})
ELSE()
  UNSET_VARS_STARTING_WITH("ALSOFT")
  UNSET_VAR("CMAKE_DEBUG_POSTFIX")
  UNSET_VAR("COREAUDIO_FRAMEWORK")
  UNSET_VAR("DLLTOOL_EXECUTABLE")
  UNSET_VAR("SED_EXECUTABLE")
  FIND_PACKAGE(OpenAL REQUIRED)
ENDIF()

UNSET_VARS_STARTING_WITH("LIB_OGG")
SET(LIB_OGG ogg
  CACHE STRING "Ogg library name.")
SET(LIB_OGG_SOURCE_DIR ${EXT_LIBS_DIR}/ogg)
SET(LIB_OGG_INCLUDE_DIR ${LIB_OGG_SOURCE_DIR}/include
  CACHE STRING "Ogg include dir.")
ADD_SUBDIRECTORY(${LIB_OGG_SOURCE_DIR})

UNSET_VARS_STARTING_WITH("LIB_VORBIS")
SET(LIB_VORBIS vorbis
  CACHE STRING "Vorbis library name.")
SET(LIB_VORBISENC vorbisenc
  CACHE STRING "Vorbis Enc library name.")
SET(LIB_VORBISFILE vorbisfile
  CACHE STRING "Vorbis file library name.")
SET(LIB_VORBIS_SOURCE_DIR ${EXT_LIBS_DIR}/vorbis)
SET(LIB_VORBIS_INCLUDE_DIR ${LIB_VORBIS_SOURCE_DIR}/include
  CACHE STRING "Vorbis include dir.")
ADD_SUBDIRECTORY(${LIB_VORBIS_SOURCE_DIR})

MESSAGE(STATUS "")
